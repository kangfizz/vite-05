import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/@master/css/index.js
var require_css = __commonJS({
  "node_modules/@master/css/index.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports["@master/css"] = t() : e["@master/css"] = t();
    }(exports, function() {
      return (() => {
        var e = { 642: (e2) => {
          e2.exports = { "3xs": 360, "2xs": 480, xs: 600, sm: 768, md: 1024, lg: 1280, xl: 1440, "2xl": 1600, "3xl": 1920, "4xl": 2560 };
        }, 580: (e2) => {
          e2.exports = { fade: { 10: "131518", 20: "24262d", 30: "363944", 40: "4c515f", 50: "63697c", 60: "878d9f", 70: "a6abb8", 80: "c3c6cf", 90: "f4f4f6" }, gray: { 10: "151515", 20: "242424", 30: "39393b", 40: "515153", 50: "6a6a6c", 60: "8d8d8f", 70: "aaaaac", 80: "c6c6c8", 90: "f4f4f6" }, brown: { 10: "1c130f", 20: "31221b", 30: "4b3429", 40: "6a4a3a", 50: "8a604c", 60: "af836e", 70: "c4a394", 80: "d8c2b8", 90: "f8f3f1" }, orange: { 10: "221205", 20: "3a1f08", 30: "582f0d", 40: "7c4312", 50: "a15717", 60: "d5731e", 70: "e79855", 80: "efbd92", 90: "fcf1e7" }, gold: { 10: "1e1400", 20: "342300", 30: "4e3400", 40: "6e4900", 50: "906000", 60: "c08000", 70: "e89a00", 80: "ffba30", 90: "fff3da" }, yellow: { 10: "1b1500", 20: "2f2500", 30: "473800", 40: "634f00", 50: "806700", 60: "ac8a00", 70: "d0a700", 80: "f0c100", 90: "fff5ca" }, grass: { 10: "101803", 20: "1c2a05", 30: "2a4008", 40: "3c5a0b", 50: "4e750e", 60: "689c13", 70: "7dbc17", 80: "92da1a", 90: "ebfad4" }, green: { 10: "011a0b", 20: "022d13", 30: "03441d", 40: "055f28", 50: "067b34", 60: "08a345", 70: "0ac553", 80: "0be561", 90: "d5fde5" }, beryl: { 10: "001912", 20: "002b1f", 30: "00432f", 40: "005d41", 50: "007954", 60: "00a170", 70: "00c387", 80: "00e19c", 90: "c9ffee" }, teal: { 10: "001918", 20: "002b28", 30: "00413d", 40: "005b55", 50: "00776f", 60: "009f94", 70: "00bfb2", 80: "00ddce", 90: "c5fffb" }, cyan: { 10: "00181f", 20: "002a35", 30: "003f51", 40: "005973", 50: "007391", 60: "0099c1", 70: "00b9e9", 80: "3dd7ff", 90: "dff8ff" }, sky: { 10: "021726", 20: "032841", 30: "043c61", 40: "065489", 50: "086eb3", 60: "0b92ee", 70: "4db3f7", 80: "8ccefa", 90: "eaf6fe" }, blue: { 10: "051338", 20: "09205e", 30: "0d318d", 40: "1344c4", 50: "175fe9", 60: "538cee", 70: "81acf3", 80: "a5c7fd", 90: "edf4fe" }, indigo: { 10: "161031", 20: "24195e", 30: "332592", 40: "4835cc", 50: "5a5bd5", 60: "7d84e8", 70: "a1a5ee", 80: "bfc2f4", 90: "f1f2ff" }, violet: { 10: "1f0839", 20: "310e63", 30: "491595", 40: "641ed2", 50: "7949e5", 60: "9e77f5", 70: "b89bf9", 80: "d0bdfb", 90: "f5f1ff" }, purple: { 10: "220736", 20: "390c5b", 30: "551287", 40: "7719bd", 50: "9832e4", 60: "b56cec", 70: "ca96f1", 80: "dcbaf6", 90: "f9f0ff" }, fuchsia: { 10: "2b0720", 20: "470b3d", 30: "68105f", 40: "8e1691", 50: "b61cbb", 60: "e04ee5", 70: "ea86ed", 80: "f1b1f3", 90: "feefff" }, pink: { 10: "2d0519", 20: "4c082b", 30: "720c40", 40: "9d1059", 50: "ca1473", 60: "ee52a3", 70: "f388c0", 80: "f7b2d6", 90: "fff0f8" }, crimson: { 10: "33020f", 20: "500317", 30: "780522", 40: "a20d35", 50: "ce1a4b", 60: "ea5b82", 70: "f58ba7", 80: "ffb1c6", 90: "fff1f4" }, red: { 10: "350001", 20: "530001", 30: "780506", 40: "a60708", 50: "d11a1e", 60: "eb5f63", 70: "fa8b8d", 80: "fdb3b5", 90: "fff1f1" }, black: "000000", white: "ffffff" };
        }, 989: (e2, t2, s2) => {
          const i2 = s2(824), r = s2(860);
          s2(580);
          e2.exports = function(e3) {
            "string" == typeof e3 && (e3 = { "": e3 });
            const t3 = "" in e3;
            let s3 = false;
            for (const t4 in e3)
              if (t4 && +t4 >= 100) {
                s3 = true;
                break;
              }
            if (!s3 && (!t3 || Object.keys(e3).length > 1)) {
              let t4, s4, n = 0, a = "0" in e3 ? i2(e3[0]) : [0, 0, 0];
              const c = [], l = () => {
                const i3 = t4 - n, l2 = s4.map((e4, t5) => (e4 - a[t5]) / i3);
                for (const t5 of c) {
                  const s5 = t5 - n, i4 = a.map((e4, t6) => Math.round(e4 + l2[t6] * s5));
                  e3[t5] = r.call(this, ...i4);
                }
              };
              for (let r2 = 1; r2 < 100; r2++) {
                const o = r2 % 2 == 0;
                r2 in e3 ? (c.length ? (t4 = r2, s4 = i2(e3[r2]), l(), c.length = 0, a = s4) : a = i2(e3[r2]), n = r2) : o && c.push(r2);
              }
              c.length && (t4 = 100, s4 = "100" in e3 ? i2(e3[100]) : [255, 255, 255], l());
            }
            return t3 || (e3[""] = e3[s3 ? "500" : "50"]), e3;
          };
        }, 824: (e2) => {
          e2.exports = function(e3) {
            const t2 = e3.match(/.{1,2}/g);
            return [parseInt(t2[0], 16), parseInt(t2[1], 16), parseInt(t2[2], 16)];
          };
        }, 860: (e2) => {
          e2.exports = function(e3, t2, s2) {
            return ((1 << 24) + (e3 << 16) + (t2 << 8) + s2).toString(16).slice(1);
          };
        } }, t = {};
        function s(i2) {
          var r = t[i2];
          if (void 0 !== r)
            return r.exports;
          var n = t[i2] = { exports: {} };
          return e[i2](n, n.exports, s), n.exports;
        }
        s.n = (e2) => {
          var t2 = e2 && e2.__esModule ? () => e2.default : () => e2;
          return s.d(t2, { a: t2 }), t2;
        }, s.d = (e2, t2) => {
          for (var i2 in t2)
            s.o(t2, i2) && !s.o(e2, i2) && Object.defineProperty(e2, i2, { enumerable: true, get: t2[i2] });
        }, s.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), s.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        };
        var i = {};
        return (() => {
          "use strict";
          function e2(e3, t3) {
            return e3 + ":" + (t3.unit ? t3.value + t3.unit : t3.value) + (t3.important ? "!important" : "");
          }
          s.r(i), s.d(i, { Style: () => $t, StyleSheet: () => Ct, Styles: () => qn, breakpoints: () => Qn, colors: () => Fn, init: () => Zn, sheets: () => Nt });
          const t2 = /^([+-.]?\d+(\.?\d+)?)(.*)?/;
          function r(e3, s2, i2, r2, n2) {
            let a2 = r2 ? r2[e3] : "", c2 = "", l2 = "";
            if (a2)
              return { value: a2, unit: c2, unitToken: l2 };
            if ("number" == typeof e3)
              a2 = e3, c2 = s2 || "";
            else {
              if (i2) {
                const t3 = Object.keys(i2);
                e3 = e3.replace(new RegExp(`(^|,| |\\()(${t3.join("|")})(?:-([0-9]+))?(?:\\/(\\.?[0-9]+))?(?=(\\)|\\}|,| |$))`, "gm"), (e4, t4, s3, r3, n3, a3) => {
                  const c3 = i2[s3][r3 || ""];
                  if (c3) {
                    let e5 = "#" + c3;
                    if (n3) {
                      let t5 = +n3;
                      t5 = isNaN(t5) ? 1 : Math.min(Math.max(t5, 0), 1), e5 += Math.round(255 * t5).toString(16).toUpperCase().padStart(2, "0");
                    }
                    return t4 + e5;
                  }
                  return e4;
                });
              }
              if (s2) {
                const i3 = e3.match(t2);
                if (i3) {
                  if (e3.includes("/")) {
                    const t3 = e3.split("/");
                    return { value: +t3[0] / +t3[1] * 100 + "%", unit: c2, unitToken: l2 };
                  }
                  return a2 = +i3[1], c2 = l2 = i3[3] || "", c2 || ("rem" !== s2 && "em" !== s2 || (a2 /= n2), c2 = s2 || ""), { value: a2, unit: c2, unitToken: l2 };
                }
              }
              a2 = (-1 === e3.indexOf("calc(") ? e3 : function(e4) {
                const t3 = (e5) => "+" === e5 || "-" === e5 || "*" === e5 || "/" === e5;
                let s3, i3 = "", r3 = "", n3 = false;
                function a3() {
                  s3 = null, r3 = "";
                }
                for (let c3 = 0; c3 < e4.length; c3++) {
                  const l3 = e4[c3];
                  if ("(" === l3 || ")" === l3)
                    n3 = ")" === l3, i3 += r3 + l3, a3();
                  else if ("," === l3)
                    i3 += r3 + l3 + " ", a3();
                  else {
                    switch (s3) {
                      case 1:
                        break;
                      case 2:
                        if (t3(l3)) {
                          i3 += r3 + " " + l3 + " ", a3();
                          continue;
                        }
                        break;
                      default:
                        n3 && (r3 += " "), isNaN(+l3) ? t3(l3) || (s3 = 1) : s3 = 2;
                    }
                    r3 += l3;
                  }
                }
                return r3 && (i3 += r3), i3;
              }(e3)).replace(/\$\(((\w|-)+)\)/g, "var(--$1)");
            }
            return { value: a2, unit: c2, unitToken: l2 };
          }
          const n = [":disabled", ":active", ":focus", ":hover"], a = { "(": ")", "'": "'", "{": "}" };
          var c = s(642), l = s.n(c);
          const o = (...e3) => e3.join("-"), d = "border", h = "radius", u = "margin", f = "padding", m = "font", p = "currentColor", x = ",", b = "flow", g = "template", y = "column", k = "columns", v = "gap", w = "row", O = "rows", j = "shadow", S = "user", N = "content", $ = "image", I = "stroke", R = "filter", z = "blend", W = "background", A = "repeat", C = "color", E = "scroll", M = "animation", V = "direction", _ = "mode", L = "behavior", T = o("overscroll", L), q = "y", P = "x", Z = "height", F = "width", Q = "max", U = "min", X = "block", Y = "inline", B = "flex", D = "grid", G = "transition", H = "origin", J = "delay", K = "rotate", ee = "deg", te = "timing-function", se = "duration", ie = "display", re = "hidden", ne = "box", ae = "fill", ce = "clip", le = "none", oe = "text", de = "align", he = "transform", ue = "vertical", fe = "word", me = "space", pe = "decoration", xe = "break", be = "size", ge = "auto", ye = "line", ke = "object", ve = "position", we = "rem", Oe = "style", je = "smoothing", Se = "antialiased", Ne = "spacing", $e = o("letter", Ne), Ie = o(Q, F), Re = o(U, F), ze = o(Q, Z), We = o(U, Z), Ae = "table", Ce = "group", Ee = "list", Me = "item", Ve = "span", _e = "justify", Le = "items", Te = "self", qe = "place", Pe = "type", Ze = "offset", Fe = "outline", Qe = "snap", Ue = "shape", Xe = "view", Ye = "area", Be = "start", De = "blur", Ge = "drop", He = { full: "100%", fit: o("fit", N), max: o(Q, N), min: o(U, N) };
          for (const e3 in l())
            He[e3] = l()[e3] / 16 + "rem";
          const Je = s(989), Ke = "matches", et = "semantics", tt = "symbol", st = "max-width", it = "min-width", rt = "motion", nt = "reduce", at = "reduced-motion", ct = "::scrollbar", lt = "::slider-thumb", ot = "::slider-runnable-track", dt = "::search", ht = "::meter", ut = "::resizer", ft = "::progress", mt = "px", pt = ["!", "*", ">", "+", "~", ":", "[", "@", "_"], xt = [...pt, void 0, "."], bt = new RegExp(ct, "g"), gt = new RegExp(dt, "g"), yt = new RegExp(ht, "g"), kt = new RegExp(ot, "g"), vt = new RegExp(lt, "g"), wt = new RegExp(ut, "g"), Ot = new RegExp(ft, "g"), jt = /(\\'(?:.*?)[^\\]\\')(?=[*_>~+,)])|(\[[^=]+='(?:.*?)[^\\]'\])/, St = (e3) => e3.split(jt).map((e4, t3) => t3 % 3 ? e4 : e4.replace(/\_/g, " ")).join(""), Nt = [];
          class $t {
            constructor(t3, s2) {
              this.name = t3, this.matching = s2, this.at = {}, this.prioritySelectorIndex = -1;
              const i2 = this.constructor;
              if (void 0 === s2 && !(s2 = i2.match(t3)))
                return;
              let c2, l2, o2, { id: d2, semantics: h2, unit: u2, colors: f2, key: m2, values: p2, colorful: x2, breakpoints: b2, mediaQueries: g2, colorSchemes: y2, rootSize: k2 } = i2, v2 = t3;
              if (x2 || (f2 = null), s2.origin === et)
                c2 = s2.value, o2 = v2.slice(s2.value.length), this.value = h2[s2.value];
              else {
                if (s2.origin === Ke)
                  if (d2 === Ce) {
                    let e4 = 0;
                    for (; e4 < v2.length && ("{" !== v2[e4] || "\\" === v2[e4 - 1]); e4++)
                      ;
                    l2 = v2.slice(0, e4), c2 = v2.slice(e4);
                  } else {
                    const e4 = v2.indexOf(":");
                    this.prefix = v2.slice(0, e4 + 1), this.prefix.includes("(") ? (this.prefix = void 0, c2 = v2) : c2 = v2.slice(e4 + 1);
                  }
                else
                  s2.origin === tt && (this.symbol = v2[0], c2 = v2.slice(1));
                let e3, t4 = "", i3 = [], n2 = 0;
                !function s3(l3, o3, d3 = "") {
                  let h3, m3 = false;
                  for (l3 && (")" === l3 && "$" === t4.slice(-1) ? h3 = t4.length - 1 : "'" === l3 && (m3 = true), t4 += c2[n2++]); n2 < c2.length; n2++) {
                    const x3 = c2[n2];
                    if (x3 === l3) {
                      if (t4 += x3, m3) {
                        let e4 = 0;
                        for (let s4 = t4.length - 2; "\\" === t4[s4]; s4--)
                          e4++;
                        if (e4 % 2)
                          continue;
                      }
                      void 0 !== h3 && (t4 = t4.slice(0, h3) + t4.slice(h3).replace(/\$\((.*)\)/, "var(--$1)")), o3 || (m3 ? i3.push(t4) : (e3 = r(t4, u2, f2, p2, k2), i3.push(e3.value + e3.unit)), d3 = "", t4 = "");
                      break;
                    }
                    if (!m3 && x3 in a)
                      s3(a[x3], void 0 === o3 ? 0 : o3 + 1, d3);
                    else if ("|" !== x3 || "}" === l3 || m3 && "path" !== d3) {
                      if (!l3) {
                        if ("." === x3) {
                          if (isNaN(+c2[n2 + 1]))
                            break;
                          "-" === c2[n2 - 1] && (t4 += "0");
                        } else {
                          if ("," === x3) {
                            e3 = r(t4, u2, f2, p2, k2), i3.push(e3.value + e3.unit, ","), t4 = "";
                            continue;
                          }
                          if ("#" === x3 && (t4 || i3.length && "|" !== c2[n2 - 1]) || pt.includes(x3))
                            break;
                        }
                        d3 += x3;
                      }
                      t4 += x3;
                    } else
                      l3 ? t4 += " " : (e3 = r(t4, u2, f2, p2, k2), i3.push(e3.value + e3.unit), t4 = "");
                  }
                }(), t4 && (e3 = r(t4, u2, f2, p2, k2), i3.push(e3.value + e3.unit)), o2 = c2.slice(n2), 1 === i3.length ? e3 ? (this.value = e3.value, this.unit = e3.unit) : (this.value = i3[0], this.unit = "") : this.value = i3.reduce((e4, t5, s3) => e4 + t5 + ("," === t5 || "," === i3[s3 + 1] || s3 === i3.length - 1 ? "" : " "), "");
              }
              o2.includes(ct) && (o2 = o2.replace(bt, "::-webkit-scrollbar")), o2.includes(dt) && (o2 = o2.replace(gt, "::-webkit-search")), o2.includes(lt) && (o2 = o2.replace(vt, "::-webkit-slider-thumb")), o2.includes(ot) && (o2 = o2.replace(kt, "::-webkit-slider-runnable-track")), o2.includes(ht) && (o2 = o2.replace(yt, "::-webkit-meter")), o2.includes(ut) && (o2 = o2.replace(wt, "::-webkit-resizer")), o2.includes(ft) && (o2 = o2.replace(Ot, "::-webkit-progress")), o2.includes(":first") && (o2 = o2.replace(/:first(?![a-z-])/g, ":first-child")), o2.includes(":last") && (o2 = o2.replace(/:last(?![a-z-])/g, ":last-child")), o2.includes(":even") && (o2 = o2.replace(/:even(?![a-z-])/g, ":nth-child(2n)")), o2.includes(":odd") && (o2 = o2.replace(/:odd(?![a-z-])/g, ":nth-child(odd)")), o2.includes(":nth(") && (o2 = o2.replace(/:nth\(/g, ":nth-child(")), this.parseValue && (this.value = this.parseValue), p2 && this.value in p2 && (this.value = p2[this.value]), "!" === o2[0] && (this.important = true, o2 = o2.slice(1)), this.prefixSelector = l2 ? St(l2) : "";
              const w2 = o2.split("@");
              let O2 = w2[0];
              if (O2) {
                O2 = St(O2), this.hasWhere = O2.includes(":where(");
                for (let e3 = 0; e3 < n.length; e3++)
                  if (O2.includes(n[e3])) {
                    this.prioritySelectorIndex = e3;
                    break;
                  }
              }
              this.suffixSelector = O2;
              for (let e3 = 1; e3 < w2.length; e3++) {
                const t4 = w2[e3];
                if (t4)
                  if (y2.includes(t4))
                    this.colorScheme = t4;
                  else if ("rtl" === t4 || "ltr" === t4)
                    this.direction = t4;
                  else {
                    let e4, s3;
                    const i3 = t4.indexOf("_");
                    if (-1 !== i3)
                      e4 = t4.slice(0, i3), s3 = t4.slice(i3);
                    else {
                      const i4 = t4.indexOf("(");
                      -1 !== i4 && (e4 = t4.slice(0, i4), s3 = t4.slice(i4));
                    }
                    if (!e4) {
                      e4 = "media";
                      const i4 = [];
                      this.media = { token: t4, features: {} };
                      const n2 = t4.split("&");
                      for (const e5 of n2)
                        if ("all" === e5 || "print" === e5 || "screen" === e5 || "speech" === e5)
                          this.media.type = e5;
                        else if ("🖨" === e5)
                          this.media.type = "print";
                        else if ("landscape" === e5 || "portrait" === e5)
                          i4.push("(orientation:" + e5 + ")");
                        else if (e5 === rt || e5 === at)
                          i4.push("(prefers-reduced-motion:" + (e5 === rt ? "no-preference" : nt) + ")");
                        else if (e5 in g2)
                          i4.push(g2[e5]);
                        else {
                          const t5 = { token: e5 };
                          let s4 = "", n3 = "", a2 = 0;
                          switch (e5.startsWith("<=") ? (n3 = "<=", s4 = st) : e5.startsWith(">=") || b2[e5] ? (n3 = ">=", s4 = it) : e5.startsWith(">") ? (n3 = ">", s4 = it, a2 = 0.02) : e5.startsWith("<") && (n3 = "<", s4 = st, a2 = -0.02), s4) {
                            case st:
                            case it:
                              const c3 = n3 ? e5.replace(n3, "") : e5, l3 = b2[c3];
                              l3 ? Object.assign(t5, r(l3, mt)) : Object.assign(t5, r(c3, mt)), t5.unit === mt && (t5.value += a2), this.media.features[s4] = t5, i4.push("(" + s4 + ":" + (t5.value + t5.unit) + ")");
                          }
                        }
                      s3 = "", this.media.type && (s3 = this.media.type), i4.length && (s3 += (s3 ? " and " : "") + i4.join(" and "));
                    }
                    s3 && (this.at[e4] = (e4 in this.at ? this.at[e4] + " and " : "") + s3.replace(/\_/g, " "));
                  }
              }
              let j2 = "";
              this.colorScheme && (j2 += "." + this.colorScheme + " "), this.prefixSelector && (j2 += this.prefixSelector), this.direction && (j2 += "[dir=" + this.direction + "] "), this.text = j2 + "." + CSS.escape(this.name) + this.suffixSelector + (this.name in $t.relations ? $t.relations[this.name].map((e3) => ", " + j2 + "." + CSS.escape(e3) + this.suffixSelector).join("") : "") + "{" + ("object" == typeof this.value ? Object.keys(this.value).map((t4) => e2(t4, Object.assign(Object.assign({}, this), { unit: "", value: this.value[t4] }))).join(";") : this.props ? Object.keys(this.props).map((t4) => e2(t4, this.props[t4])).join(";") : e2(m2, this)) + "}";
              for (const e3 of Object.keys(this.at).sort((e4, t4) => "supports" === t4 ? -1 : 1))
                this.text = "@" + e3 + " " + this.at[e3] + "{" + this.text + "}";
              void 0 === this.order && (this.order = 0);
            }
            static match(e3) {
              if (this.matches && this.matches.test(e3))
                return { origin: Ke };
              if (this.semantics) {
                for (const t3 in this.semantics)
                  if (e3 === t3 || e3.startsWith(t3) && xt.includes(e3[t3.length]))
                    return { origin: et, value: t3 };
              }
              return this.colorStarts && (e3.match("^" + this.colorStarts + "(#|(rgb|hsl)\\(.*\\))((?!\\|).)*$") || this.colorNames.length && e3.match("^" + this.colorStarts + "(" + this.colorNames.join("|") + ")") && -1 === e3.indexOf("|")) ? { origin: Ke } : this.symbol && e3.startsWith(this.symbol) ? { origin: tt } : this.key && e3.startsWith(this.key + ":") ? { origin: Ke } : void 0;
            }
            static extend(e3, ...t3) {
              if (!t3.length)
                return this;
              const s2 = Object.assign({}, ...t3), i2 = (e4, t4, i3) => {
                var r2;
                for (const n2 in s2) {
                  const a2 = s2[n2];
                  null == a2 ? n2 in e4 && (null == i3 || i3(n2), delete e4[n2]) : e4[n2] = null !== (r2 = null == t4 ? void 0 : t4(n2, a2)) && void 0 !== r2 ? r2 : a2;
                }
              };
              switch (e3) {
                case "classes":
                  i2(this.classes, (e4, t5) => {
                    if (e4 in this.classes)
                      for (const t6 in this.relations) {
                        const s4 = this.relations[t6], i3 = s4.indexOf(e4);
                        -1 !== i3 && (s4.length > 1 ? s4.splice(i3, 1) : delete this.relations[t6]);
                      }
                    const s3 = Array.isArray(t5) ? t5 : t5.replace(/(?:\n(?:\s*))+/g, " ").trim().split(" ");
                    for (const t6 of s3)
                      t6 in this.relations ? this.relations[t6].push(e4) : this.relations[t6] = [e4];
                    return s3;
                  }, (e4) => {
                    for (const t5 of this.classes[e4]) {
                      const s3 = this.relations[t5];
                      s3.length > 1 ? s3.splice(s3.indexOf(e4), 1) : delete this.relations[t5];
                    }
                  });
                  break;
                case "colors":
                  i2(this.colors, (e4, t5) => (-1 === this.colorNames.indexOf(e4) && this.colorNames.push(e4), Je(t5)), (e4) => {
                    const t5 = this.colorNames.indexOf(e4);
                    -1 !== t5 && this.colorNames.splice(t5, 1);
                  });
                  break;
                default:
                  let t4 = this[e3];
                  t4 || (t4 = this[e3] = {}), i2(t4);
              }
              return this;
            }
          }
          $t.unit = "rem", $t.rootSize = 16, $t.mediaQueries = {}, $t.sheets = Nt, $t.colors = {}, $t.classes = {}, $t.colorNames = [], $t.relations = {}, $t.colorSchemes = ["dark", "light"], "undefined" != typeof window && (window.MasterStyle = $t);
          const It = [",", ".", "#", "[", "!", "*", ">", "+", "~", ":", "@"], Rt = "undefined" != typeof document;
          let zt;
          Rt && (zt = document.createElement("style"), zt.id = "master-css");
          const Wt = "undefined" != typeof window, At = Wt ? window.MutationObserver : Object;
          class Ct extends At {
            constructor(e3) {
              if (super((e4) => {
                const t3 = {}, s2 = [], i2 = [], r2 = [], n2 = (e5, t4) => {
                  t4 ? e5.classList.forEach(c2) : e5.classList.forEach(a2);
                  const s3 = e5.children;
                  for (let e6 = 0; e6 < s3.length; e6++) {
                    const r3 = s3[e6];
                    r3.classList && (i2.push(r3), n2(r3, t4));
                  }
                }, a2 = (e5) => {
                  e5 in t3 ? t3[e5]++ : t3[e5] = 1;
                }, c2 = (e5) => {
                  e5 in t3 ? t3[e5]-- : e5 in this.countOfName && (t3[e5] = -1);
                }, l2 = (e5, t4) => {
                  for (let s3 = 0; s3 < e5.length; s3++) {
                    const a3 = e5[s3];
                    !a3.classList || i2.includes(a3) || r2.includes(a3) || (a3.isConnected !== t4 ? (i2.push(a3), n2(a3, t4)) : r2.push(a3));
                  }
                };
                for (let t4 = 0; t4 < e4.length; t4++) {
                  const r3 = e4[t4], { addedNodes: n3, removedNodes: a3, type: c3, target: o2, oldValue: d2 } = r3;
                  if ("attributes" === c3) {
                    if (s2.find((e5) => e5.target === o2))
                      continue;
                    s2.push(r3);
                  } else
                    l2(n3, false), o2.isConnected && i2.includes(o2) || l2(a3, true);
                }
                if (s2.length || Object.keys(t3).length) {
                  for (const { oldValue: e5, target: t4 } of s2) {
                    const s3 = i2.includes(t4), r3 = t4.classList, n3 = e5 ? e5.split(" ") : [];
                    if (s3) {
                      if (t4.isConnected)
                        continue;
                      for (const e6 of n3)
                        r3.contains(e6) || c2(e6);
                    } else if (t4.isConnected) {
                      r3.forEach((e6) => {
                        n3.includes(e6) || a2(e6);
                      });
                      for (const e6 of n3)
                        r3.contains(e6) || c2(e6);
                    }
                  }
                  for (const e5 in t3) {
                    const s3 = t3[e5], i3 = (this.countOfName[e5] || 0) + s3;
                    0 === i3 ? (delete this.countOfName[e5], this.delete(e5)) : (e5 in this.countOfName || this.findAndInsert(e5), this.countOfName[e5] = i3);
                  }
                }
              }), this.container = e3, this.styles = [], this.styleOfName = {}, this.countOfName = {}, Rt) {
                if (e3) {
                  const t3 = e3.querySelector('[id="master-css"]');
                  if (t3) {
                    this.element = t3;
                    const e4 = (t4, s2) => {
                      if (t4.selectorText) {
                        const e5 = t4.selectorText.split(", ")[0].split(" ");
                        for (let i2 = 0; i2 < e5.length; i2++) {
                          const r2 = e5[i2];
                          if ("." === r2[0]) {
                            const e6 = r2.slice(1);
                            let i3 = "";
                            for (let t5 = 0; t5 < e6.length; t5++) {
                              const s3 = e6[t5], r3 = e6[t5 + 1];
                              if ("\\" === s3) {
                                if (t5++, "\\" !== r3) {
                                  i3 += r3;
                                  continue;
                                }
                              } else if (It.includes(s3))
                                break;
                              i3 += s3;
                            }
                            if (!(i3 in this.styleOfName) && !(i3 in $t.classes)) {
                              const e7 = Ct.findAndNew(i3);
                              e7 && (e7.cssRule = null != s2 ? s2 : t4, this.styles.push(e7), this.styleOfName[e7.name] = e7);
                            }
                          }
                        }
                      } else if (t4.cssRules)
                        for (let i2 = 0; i2 < t4.cssRules.length; i2++)
                          e4(t4.cssRules[i2], null != s2 ? s2 : t4.cssRules[i2]);
                    };
                    e4(t3.sheet, void 0);
                  } else
                    this.element = zt.cloneNode(), null == e3 || e3.prepend(this.element);
                }
                Nt.push(this);
              }
            }
            observe(e3, t3 = { subtree: true, childList: true }) {
              const s2 = (e4) => {
                e4.forEach((e5) => {
                  e5 in this.countOfName ? this.countOfName[e5]++ : (this.countOfName[e5] = 1, this.findAndInsert(e5));
                });
              };
              return s2(e3.classList), t3.subtree && e3.querySelectorAll("[class]").forEach((e4) => s2(e4.classList)), super.observe(e3, Object.assign(Object.assign({}, t3), { attributes: true, attributeOldValue: true, attributeFilter: ["class"] })), this;
            }
            disconnect() {
              super.disconnect(), this.styleOfName = {}, this.countOfName = {}, this.styles.length = 0;
              const e3 = this.element.sheet;
              if (e3)
                for (let t3 = e3.cssRules.length - 1; t3 >= 0; t3--)
                  e3.deleteRule(t3);
            }
            static findAndNew(e3) {
              const t3 = (e4) => {
                for (const t4 of this.Styles) {
                  const s2 = t4.match(e4);
                  if (s2)
                    return new t4(e4, s2);
                }
              };
              return e3 in $t.classes ? $t.classes[e3].map(t3).filter((e4) => e4) : t3(e3);
            }
            static find(e3) {
              const t3 = (e4) => {
                for (const t4 of this.Styles) {
                  if (t4.match(e4))
                    return t4;
                }
              };
              return e3 in $t.classes ? $t.classes[e3].map(t3).filter((e4) => e4) : t3(e3);
            }
            static refresh() {
              for (const e3 of Nt)
                e3.refresh();
            }
            refresh() {
              if (!this.element)
                return;
              const e3 = zt.cloneNode();
              this.element.replaceWith(e3), this.element = e3, this.styles.length = 0, this.styleOfName = {};
              for (const e4 in this.countOfName)
                this.findAndInsert(e4);
            }
            destroy() {
              this.disconnect(), Nt.splice(Nt.indexOf(this), 1), this.element.remove();
            }
            insert(e3) {
              if (this.styleOfName[e3.name])
                return;
              const t3 = e3.text;
              let s2;
              const i2 = this.styles.length - 1, r2 = e3.media, n2 = e3.order, a2 = e3.prioritySelectorIndex, c2 = e3.hasWhere, l2 = (e4, t4, s3, i3) => {
                let r3, l3, o2 = 0;
                t4 && (o2 = e4.findIndex(t4)), s3 && (l3 = e4.findIndex(s3)), -1 === o2 && (o2 = e4.length), void 0 !== l3 && -1 !== l3 || (l3 = e4.length), r3 = e4.slice(o2, l3);
                for (let e5 = 0; e5 < r3.length; e5++) {
                  const t5 = r3[e5];
                  if (!(-1 === t5.prioritySelectorIndex || i3 && i3(t5)) && (t5.prioritySelectorIndex < a2 || t5.prioritySelectorIndex === a2 && (c2 && !t5.hasWhere || t5.order >= n2)))
                    return o2 + e5;
                }
                return o2 + r3.length;
              };
              if (r2) {
                const e4 = this.styles.findIndex((e5) => e5.media);
                if (-1 !== e4) {
                  const t4 = r2.features["max-width"], o2 = r2.features["min-width"];
                  if (t4 && o2) {
                    const r3 = t4.value - o2.value;
                    for (let t5 = i2; t5 >= e4; t5--) {
                      s2 = t5;
                      const i3 = this.styles[t5], n3 = i3.media, o3 = n3.features["max-width"], d2 = n3.features["min-width"];
                      if (!o3 || !d2) {
                        s2++;
                        break;
                      }
                      const h2 = o3.value - d2.value;
                      if (h2 === r3) {
                        if (c2 !== i3.hasWhere)
                          continue;
                        if (-1 !== a2) {
                          const i4 = [this.styles[t5]];
                          for (let s3 = t5 - 1; s3 >= e4; s3--) {
                            const e5 = this.styles[s3];
                            if (e5.hasWhere !== c2)
                              break;
                            const t6 = e5.media, r4 = t6.features["max-width"], n4 = t6.features["min-width"];
                            if (!r4 || !n4 || r4.value - n4.value !== h2)
                              break;
                            i4.unshift(this.styles[s3]);
                          }
                          s2 = l2(this.styles, (e5) => e5.media && -1 !== e5.prioritySelectorIndex && e5.media.features["min-width"] && e5.media.features["max-width"]);
                        }
                        break;
                      }
                      if (h2 > r3)
                        break;
                    }
                  } else if (o2)
                    for (let t5 = e4; t5 <= i2; t5++) {
                      s2 = t5;
                      const e5 = this.styles[t5], r3 = e5.media, d2 = r3.features["max-width"], h2 = r3.features["min-width"];
                      if (d2) {
                        if (h2)
                          break;
                        continue;
                      }
                      const u2 = null == h2 ? void 0 : h2.value;
                      if (u2 === o2.value) {
                        if (!c2 && e5.hasWhere) {
                          s2++;
                          continue;
                        }
                        if (-1 !== a2)
                          s2 = l2(this.styles, (e6) => e6.media, (e6) => e6.media && -1 !== e6.prioritySelectorIndex && e6.media.features["min-width"] && e6.media.features["max-width"], (e6) => !e6.media.features["min-width"] && !e6.media.features["max-width"]);
                        else
                          for (let e6 = t5; e6 <= i2; e6++) {
                            const t6 = this.styles[e6], i3 = t6.media, r4 = i3.features["min-width"];
                            if (!i3.features["max-width"]) {
                              if (t6.hasWhere !== c2 || r4.value !== u2 || t6.order >= n2)
                                break;
                              s2 = e6 + 1;
                            }
                          }
                        break;
                      }
                      if (u2 > o2.value)
                        break;
                      s2++;
                    }
                  else if (t4)
                    for (let r3 = i2; r3 >= e4; r3--) {
                      s2 = r3;
                      const i3 = this.styles[r3], o3 = i3.media, d2 = o3.features["max-width"];
                      if (o3.features["min-width"])
                        continue;
                      const h2 = null == d2 ? void 0 : d2.value;
                      if (!h2 || h2 > t4.value) {
                        s2++;
                        break;
                      }
                      if (h2 === t4.value) {
                        if (c2 && !i3.hasWhere)
                          continue;
                        if (-1 !== a2)
                          s2 = l2(this.styles, (e5) => e5.media, (e5) => e5.media && -1 !== e5.prioritySelectorIndex && e5.media.features["min-width"] && e5.media.features["max-width"], (e5) => !e5.media.features["min-width"] && !e5.media.features["max-width"]);
                        else {
                          const t5 = [this.styles[r3]];
                          for (let s3 = r3 - 1; s3 >= e4; s3--) {
                            const e5 = this.styles[s3], i4 = e5.media, r4 = i4.features["min-width"], n3 = i4.features["max-width"];
                            if (!(r4 || n3 && n3.value === h2 && e5.hasWhere === c2))
                              break;
                            t5.unshift(e5);
                          }
                          for (let e5 = 0; e5 < t5.length; e5++) {
                            const i4 = t5[e5];
                            if (!i4.media.features["min-width"]) {
                              if (i4.order >= n2)
                                break;
                              s2 = r3 - t5.length + 2 + e5;
                            }
                          }
                        }
                        break;
                      }
                    }
                }
                if (void 0 === s2)
                  if (-1 === e4)
                    s2 = i2 + 1;
                  else if (-1 !== a2)
                    s2 = e4 + l2(this.styles.slice(e4), void 0, (e5) => e5.media.features["max-width"] || e5.media.features["min-width"]);
                  else if (c2) {
                    let t4 = e4;
                    for (; t4 < this.styles.length; t4++) {
                      const e5 = this.styles[t4];
                      if (-1 !== e5.prioritySelectorIndex || !e5.hasWhere || e5.order >= n2) {
                        s2 = t4;
                        break;
                      }
                    }
                    void 0 === s2 && (s2 = t4);
                  } else
                    for (let t4 = e4; t4 <= i2; t4++) {
                      s2 = t4;
                      const e5 = this.styles[t4], i3 = e5.media;
                      if (-1 !== e5.prioritySelectorIndex || i3.features["max-width"] || i3.features["min-width"])
                        break;
                      if (e5.hasWhere)
                        s2++;
                      else if (e5.order >= n2)
                        break;
                    }
              } else if (-1 === a2)
                if (c2)
                  s2 = this.styles.findIndex((e4) => !e4.hasWhere || e4.media || -1 !== e4.prioritySelectorIndex || e4.order >= n2), -1 === s2 && (s2 = i2 + 1);
                else {
                  let e4 = 0;
                  for (; e4 < this.styles.length; e4++) {
                    const t4 = this.styles[e4];
                    if (t4.media || !t4.hasWhere && (t4.order >= n2 || -1 !== t4.prioritySelectorIndex)) {
                      s2 = e4;
                      break;
                    }
                  }
                  void 0 === s2 && (s2 = e4);
                }
              else
                s2 = l2(this.styles, void 0, (e4) => e4.media);
              try {
                if (this.element) {
                  const i3 = this.element.sheet;
                  i3.insertRule(t3, s2), e3.cssRule = i3.cssRules[s2];
                }
                this.styles.splice(s2, 0, e3), this.styleOfName[e3.name] = e3;
              } catch (e4) {
              }
            }
            delete(e3) {
              const t3 = this.element.sheet, s2 = (e4) => {
                const s3 = this.styleOfName[e4];
                if (!(!(null == s3 ? void 0 : s3.cssRule) || e4 in $t.relations && $t.relations[e4].some((e5) => e5 in this.countOfName)))
                  for (let e5 = 0; e5 < t3.cssRules.length; e5++) {
                    t3.cssRules[e5] === s3.cssRule && (t3.deleteRule(e5), this.styles.splice(e5, 1), delete this.styleOfName[s3.name]);
                  }
              };
              if (e3 in $t.classes)
                for (const t4 of $t.classes[e3])
                  t4 in this.countOfName || s2(t4);
              else
                s2(e3);
            }
            findAndInsert(e3) {
              const t3 = Ct.findAndNew(e3);
              if (Array.isArray(t3))
                for (const e4 of t3)
                  this.insert(e4);
              else
                t3 && this.insert(t3);
            }
          }
          Ct.Styles = [], Wt && (window.MasterStyleSheet = Ct);
          class Et extends $t {
          }
          Et.matches = /^f(ont)?:(thin|extralight|light|regular|medium|semibold|bold|bolder|extrabold|heavy)(?!\|)/, Et.key = o(m, "weight"), Et.unit = "", Et.values = { thin: 100, extralight: 200, light: 300, regular: 400, medium: 500, semibold: 600, bold: 700, extrabold: 800, heavy: 900 };
          const Mt = "var(--font-";
          class Vt extends $t {
          }
          Vt.matches = /^f(ont)?:(mono|sans|serif)(?!\|)/, Vt.key = o(m, "family"), Vt.values = { mono: Mt + "mono)", sans: Mt + "sans)", serif: Mt + "serif)" };
          class _t extends $t {
          }
          _t.matches = /^f(ont)?:([0-9]|(max|min|calc|clamp)\(.*\))((?!\|).)*$/, _t.key = o(m, be);
          const Lt = "top", Tt = "bottom", qt = "left", Pt = "right", Zt = "l", Ft = "r", Qt = "t", Ut = "b", Xt = "x", Yt = "y";
          class Bt extends $t {
            get props() {
              const e3 = "m" === this.prefix[0] ? u : f, t3 = o(e3, qt), s2 = o(e3, Pt), i2 = o(e3, Lt), r2 = o(e3, Tt);
              switch (this.prefix[1]) {
                case Xt:
                  return { [t3]: this, [s2]: this };
                case Yt:
                  return { [i2]: this, [r2]: this };
                case Zt:
                  return { [t3]: this };
                case Ft:
                  return { [s2]: this };
                case Qt:
                  return { [i2]: this };
                case Ut:
                  return { [r2]: this };
                default:
                  return { [e3]: this };
              }
            }
            get order() {
              return "p:" === this.prefix || "m:" === this.prefix ? -1 : 0;
            }
          }
          Bt.id = "spacing", Bt.matches = /^[pm][xytblr]?:./;
          class Dt extends $t {
          }
          Dt.matches = /^w:./, Dt.key = F, Dt.values = He;
          class Gt extends $t {
          }
          Gt.matches = /^h:./, Gt.key = Z, Gt.values = He;
          class Ht extends $t {
          }
          Ht.matches = /^min-w:./, Ht.key = Re, Ht.values = He;
          class Jt extends $t {
          }
          Jt.matches = /^min-h:./, Jt.key = We, Jt.values = He;
          class Kt extends $t {
          }
          Kt.matches = /^ls:./, Kt.key = $e, Kt.unit = "em";
          const es = o("subpixel", Se), ts = o("-webkit-font", je), ss = o("-moz-osxfont", je);
          class is extends $t {
            get props() {
              const e3 = {};
              switch (this.value) {
                case es:
                  e3[ts] = e3[ss] = Object.assign(Object.assign({}, this), { value: ge });
                  break;
                case Se:
                  e3[ts] = Object.assign(Object.assign({}, this), { value: Se }), e3[ss] = Object.assign(Object.assign({}, this), { value: "grayscale" });
              }
              return e3;
            }
          }
          is.id = "fontSmoothing", is.matches = /^f(ont)?:(antialiased|subpixel-antialiased)(?!\|)/, is.unit = "";
          class rs extends $t {
          }
          rs.matches = /^f(ont)?:(normal|italic|oblique)(?!\|)/, rs.key = o(m, Oe), rs.unit = "deg", rs.semantics = { italic: "italic", oblique: "oblique" };
          class ns extends $t {
          }
          ns.matches = /^f(ont)?:(ordinal|slashed-zero|lining-nums|oldstyle-nums|proportional-nums|tabular-nums|diagonal-fractions|stacked-fractions)(?!\|)/, ns.key = o(m, "variant", "numeric");
          class as extends $t {
          }
          as.matches = /^lh:./, as.key = o(ye, Z), as.unit = "";
          class cs extends $t {
          }
          cs.matches = /^(object|obj):(contain|cover|fill|scale-down)/, cs.key = o(ke, "fit");
          class ls extends $t {
          }
          ls.matches = /^(object|obj):(top|bottom|right|left|center)/, ls.key = o(ke, ve);
          class os extends $t {
          }
          os.matches = /^t(ext)?:(justify|center|left|right|start|end)(?!\|)/, os.key = o(oe, de);
          class ds extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          ds.matches = /^t(ext)?:(underline|line-through|overline)/, ds.key = o(oe, pe), ds.colorful = true;
          class hs extends $t {
          }
          hs.matches = /^t(ext)?:(uppercase|lowercase|capitalize)(?!\|)/, hs.key = o(oe, he), hs.semantics = { uppercase: "uppercase", lowercase: "lowercase", capitalize: "capitalize" };
          class us extends $t {
          }
          us.matches = /^(?:v|vertical):./, us.key = o(ue, de);
          class fs extends $t {
            get props() {
              return { overflow: Object.assign(Object.assign({}, this), { value: re }), display: Object.assign(Object.assign({}, this), { value: "-webkit-box" }), "overflow-wrap": Object.assign(Object.assign({}, this), { value: o(xe, fe) }), "text-overflow": Object.assign(Object.assign({}, this), { value: "ellipsis" }), "-webkit-box-orient": Object.assign(Object.assign({}, this), { value: ue }), "-webkit-line-clamp": this };
            }
          }
          fs.id = "lines", fs.matches = /^lines:./, fs.unit = "";
          class ms extends $t {
          }
          ms.matches = /^transform:((top|bottom|right|left|center)|\d)/, ms.key = o(he, H), ms.unit = "px";
          class ps extends $t {
          }
          ps.matches = /^transform:(flat|preserve-3d)(?!\|)/, ps.key = o(he, Oe);
          class xs extends $t {
          }
          xs.matches = /^transform:(content|border|fill|stroke|view)(?!\|)/, xs.key = o(he, ne), xs.values = { content: o(N, ne), border: o(d, ne), fill: o(ae, ne), stroke: o(I, ne), view: o(Xe, ne) };
          class bs extends $t {
            get parseValue() {
              return this.value.replace(/(translate|scale|skew|rotate|perspective|matrix)(3d|[XYZ])?\((.*?)\)/g, (e3, t3, s2, i2) => {
                let r2, n2;
                switch (t3) {
                  case "translate":
                    r2 = we;
                    break;
                  case "skew":
                    r2 = ee;
                    break;
                  case K:
                    "3d" === s2 && (n2 = true), r2 = ee;
                    break;
                  default:
                    return e3;
                }
                const a2 = i2.split(",");
                return e3.replace(i2, a2.map((e4, t4) => {
                  if (n2 && a2.length - 1 !== t4)
                    return e4;
                  return Number.isNaN(+e4) ? e4 : e4 / (r2 === we ? 16 : 1) + r2;
                }).join(","));
              });
            }
          }
          bs.matches = /^(translate|scale|skew|rotate|perspective|matrix)(3d|[XYZ])?\(/, bs.key = he, bs.unit = "";
          class gs extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          gs.symbol = "~", gs.key = G;
          class ys extends $t {
          }
          ys.matches = /^~delay:./, ys.key = o(G, J), ys.unit = "ms";
          class ks extends $t {
          }
          ks.matches = /^~duration:./, ks.key = o(G, se), ks.unit = "ms";
          class vs extends $t {
          }
          vs.matches = /^~property:./, vs.key = o(G, "property");
          class ws extends $t {
          }
          ws.matches = /^~easing:./, ws.key = o(G, te);
          class Os extends $t {
          }
          Os.matches = /^max-h:./, Os.key = ze, Os.values = He;
          class js extends $t {
          }
          js.matches = /^max-w:./, js.key = Ie, js.values = He;
          class Ss extends $t {
          }
          Ss.matches = /^d:./, Ss.key = ie, Ss.semantics = { hidden: le, hide: le, block: X, table: Ae, flex: B, grid: D, contents: "contents", inline: Y, "inline-block": o(Y, X), "inline-flex": o(Y, B), "inline-grid": o(Y, D), "inline-table": o(Y, Ae), "table-cell": o(Ae, "cell"), "table-caption": o(Ae, "caption"), "flow-root": o(b, "root"), "list-item": o(Ee, Me), "table-row": o(Ae, w), "table-column": o(Ae, y), "table-row-group": o(Ae, w, Ce), "table-column-group": o(Ae, y, Ce), "table-header-group": o(Ae, "header", Ce), "table-footer-group": o(Ae, "footer", Ce) };
          class Ns extends $t {
          }
          Ns.matches = /^box:(content|border)(?!\|)/, Ns.key = o(ne, "sizing"), Ns.values = { content: o(N, ne), border: o(d, ne) };
          class $s extends $t {
          }
          $s.key = "opacity", $s.unit = "";
          class Is extends $t {
          }
          Is.key = "visibility", Is.semantics = { visible: "visible", invisible: re };
          class Rs extends $t {
          }
          Rs.key = "clear";
          class zs extends $t {
          }
          zs.key = "float";
          class Ws extends $t {
          }
          Ws.key = "isolation", Ws.semantics = { isolate: "isolate" };
          class As extends $t {
            get props() {
              if (this.prefix)
                switch (this.prefix.slice(-2, -1)) {
                  case P:
                    return { "overflow-x": this };
                  case q:
                    return { "overflow-y": this };
                }
              return { overflow: this };
            }
            get order() {
              if (this.prefix)
                switch (this.prefix.slice(-2, -1)) {
                  case P:
                  case q:
                    return 0;
                }
              return -1;
            }
          }
          As.id = "overflow", As.matches = /^overflow(-x|-y)?:(?:visible|overlay|hidden|scroll|auto|clip|inherit|initial|revert|revert-layer|unset|\$|var)/, As.semantics = { overflow: "visible" };
          class Cs extends $t {
            get props() {
              switch (this.prefix.slice(-2, -1)) {
                case P:
                  return { [o(T, P)]: this };
                case q:
                  return { [o(T, q)]: this };
                default:
                  return { [T]: this };
              }
            }
          }
          Cs.id = "overscrollBehavior", Cs.matches = /^overscroll-behavior(?:-[xy])?:/;
          class Es extends $t {
          }
          Es.matches = /^z:./, Es.key = "z-index", Es.unit = "";
          class Ms extends $t {
          }
          Ms.matches = /^\@delay:./, Ms.key = o(M, J), Ms.unit = "ms";
          class Vs extends $t {
          }
          Vs.matches = /^\@direction:./, Vs.key = o(M, V);
          class _s extends $t {
          }
          _s.matches = /^\@fill-mode:./, _s.key = o(M, ae, _);
          class Ls extends $t {
          }
          Ls.matches = /^\@iteration-count:./, Ls.key = o(M, "iteration", "count"), Ls.unit = "";
          class Ts extends $t {
          }
          Ts.matches = /^\@name:./, Ts.key = o(M, "name");
          class qs extends $t {
          }
          qs.matches = /^\@play-state:./, qs.key = o(M, "play-state");
          class Ps extends $t {
          }
          Ps.matches = /^\@easing:./, Ps.key = o(M, te);
          class Zs extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          Zs.symbol = "@", Zs.key = M, Zs.unit = "";
          function Fs(e3, t3, s2 = "") {
            s2 && (s2 = "-" + s2);
            const i2 = "border-left" + s2, r2 = "border-right" + s2, n2 = "border-top" + s2, a2 = "border-bottom" + s2;
            switch (/^b(order)?-?(.)?/.exec(e3)[2]) {
              case Xt:
                return { [i2]: t3, [r2]: t3 };
              case Yt:
                return { [n2]: t3, [a2]: t3 };
              case Zt:
                return { [i2]: t3 };
              case Ft:
                return { [r2]: t3 };
              case Qt:
                return { [n2]: t3 };
              case Ut:
                return { [a2]: t3 };
              default:
                return { [d + s2]: t3 };
            }
          }
          class Qs extends $t {
            get props() {
              return Fs(this.prefix, this, C);
            }
            get order() {
              return this.prefix === o(d, C) + ":" || "b:" === this.prefix || "border:" === this.prefix ? -1 : 0;
            }
          }
          Qs.id = "borderColor", Qs.matches = /^border(-(left|right|top|bottom))?-color:./, Qs.colorStarts = "b([xytblr]|(order(-(left|right|top|bottom))?))?:", Qs.colorful = true, Qs.values = { current: p };
          const Us = o(d, Lt, qt, h), Xs = o(d, Lt, Pt, h), Ys = o(d, Tt, qt, h), Bs = o(d, Tt, Pt, h), Ds = o(d, h), Gs = [Us, Xs, Ys, Bs];
          class Hs extends $t {
            get props() {
              var e3;
              if (this.prefix) {
                let e4 = "";
                const t4 = this.prefix.split("-");
                if (t4.length > 1)
                  for (let s2 = 1; s2 < t4.length - 1; s2++)
                    e4 += t4[s2][0];
                else
                  e4 = this.prefix.slice(1, -1);
                switch (e4) {
                  case Qt:
                    return { [Us]: this, [Xs]: this };
                  case "tl":
                  case "lt":
                    return { [Us]: this };
                  case "rt":
                  case "tr":
                    return { [Xs]: this };
                  case Ut:
                    return { [Ys]: this, [Bs]: this };
                  case "bl":
                  case "lb":
                    return { [Ys]: this };
                  case "br":
                  case "rb":
                    return { [Bs]: this };
                  case Zt:
                    return { [Us]: this, [Ys]: this };
                  case Ft:
                    return { [Xs]: this, [Bs]: this };
                  default:
                    return { [Ds]: this };
                }
              }
              const t3 = null === (e3 = this.prefix) || void 0 === e3 ? void 0 : e3.slice(0, -1);
              return { [Gs.includes(t3) ? t3 : Ds]: this };
            }
            get order() {
              return this.prefix === o(d, h) + ":" || "r:" === this.prefix ? -1 : 0;
            }
          }
          Hs.id = "borderRadius", Hs.matches = /^((r[tblr]?[tblr]?|border(-(top|bottom)-(left|right))?-radius):.)/, Hs.semantics = { rounded: "1e9em", round: "50%" };
          class Js extends $t {
            get props() {
              return Fs(this.prefix, this, Oe);
            }
            get order() {
              return this.prefix === o(d, Oe) + ":" || "b:" === this.prefix || "border:" === this.prefix ? -1 : 0;
            }
          }
          Js.id = "borderStyle", Js.matches = /^(border(-(left|right|top|bottom))?-style:.|b([xytblr]|order(-(left|right|top|bottom))?)?:(none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset)(?!\|))/;
          class Ks extends $t {
            get props() {
              return Fs(this.prefix, this, F);
            }
            get order() {
              return this.prefix === o(d, F) + ":" || "b:" === this.prefix || "border:" === this.prefix ? -1 : 0;
            }
          }
          Ks.id = "borderWidth", Ks.matches = /^(border(-(left|right|top|bottom))?-width:.|b([xytblr]|order(-(left|right|top|bottom))?)?:(([0-9]|(max|min|calc|clamp)\(.*\))|(max|min|calc|clamp)\(.*\))((?!\|).)*$)/;
          class ei extends $t {
            get props() {
              return Fs(this.prefix, this);
            }
            get order() {
              return "border:" === this.prefix || "b:" === this.prefix ? -2 : -1;
            }
          }
          ei.id = "border", ei.matches = /^b([xytblr]?|order(-(left|right|top|bottom))?):./, ei.colorful = true;
          class ti extends $t {
          }
          ti.matches = /^(bg|background):(fixed|local|scroll)(?!\|)/, ti.key = o(W, "attachment");
          class si extends $t {
          }
          si.key = o(W, z, _);
          class ii extends $t {
            get props() {
              return { "-webkit-background-clip": this, "background-clip": this };
            }
          }
          ii.matches = /^(bg|background):text(?!\|)/, ii.key = o(W, ce), ii.values = { content: o(N, ne), border: o(d, ne), padding: o(f, ne) };
          class ri extends $t {
          }
          ri.matches = /^(bg|background):transparent(?!\|)/, ri.colorStarts = "(bg|background):", ri.key = o(W, C), ri.unit = "", ri.colorful = true, ri.values = { current: p };
          class ni extends $t {
          }
          ni.matches = /^(bg|background):(content|border|padding)(?!\|)/, ni.key = o(W, H), ni.values = { content: o(N, ne), border: o(d, ne), padding: o(f, ne) };
          class ai extends $t {
          }
          ai.matches = /^(bg|background):(top|bottom|right|left|center)(?!\|)/, ai.key = o(W, ve), ai.unit = "px";
          class ci extends $t {
          }
          ci.matches = /^(bg|background):(space|round|repeat|no-repeat|repeat-x|repeat-y)(?![;a-zA-Z])/, ci.key = o(W, A);
          class li extends $t {
          }
          li.matches = /^(bg|background):((auto|cover|contain)(?!\|)|\.?\d((?!\|).)*$)/, li.key = o(W, be);
          class oi extends $t {
          }
          oi.matches = /^(bg|background):(url|linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient|conic-gradient)\(.*\)((?!\|).)*$/, oi.key = o(W, $), oi.colorful = true;
          class di extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          di.matches = /^bg:./, di.key = W, di.colorful = true;
          class hi extends $t {
          }
          hi.matches = /^blend:./, hi.key = o("mix", z, _);
          class ui extends $t {
          }
          ui.key = ve, ui.values = { abs: "absolute", rel: "relative" }, ui.semantics = { static: "static", fixed: "fixed", abs: "absolute", rel: "relative", sticky: "sticky" };
          class fi extends $t {
            get props() {
              const e3 = this.prefix.slice(0, -1);
              switch (e3) {
                case Lt:
                case qt:
                case Pt:
                case Tt:
                  return { [e3]: this };
                case "center":
                  return { left: this, right: this, "margin-left": Object.assign(Object.assign({}, this), { unit: "" }), "margin-right": Object.assign(Object.assign({}, this), { unit: "" }) };
                case "middle":
                  return { top: this, bottom: this, "margin-top": Object.assign(Object.assign({}, this), { unit: "" }), "margin-bottom": Object.assign(Object.assign({}, this), { unit: "" }) };
              }
            }
          }
          function mi(e3, t3) {
            let s2 = "", i2 = 0;
            return function r2(n2, a2) {
              let c2 = "";
              const l2 = a2 ? t3(a2) : "", o2 = () => {
                c2 && (s2 += !l2 || Number.isNaN(+c2) ? c2 : +c2 / (l2 === we ? 16 : 1) + l2, c2 = "");
              };
              for (; i2 < e3.length; i2++) {
                const t4 = e3[i2];
                if (t4 === n2 && ("'" !== n2 || ")" === e3[i2 + 1])) {
                  o2(), s2 += t4;
                  break;
                }
                "," === t4 || " " === t4 ? (o2(), s2 += t4) : c2 || "'" !== t4 ? c2 && "(" === t4 ? (s2 += c2 + t4, i2++, r2(")", c2), c2 = "") : c2 += t4 : (s2 += t4, i2++, r2(t4), c2 = "");
              }
              o2();
            }(), s2;
          }
          fi.matches = /^(top|left|right|bottom|center|middle):./;
          class pi extends $t {
            get props() {
              return { "backdrop-filter": this, "-webkit-backdrop-filter": this };
            }
            get parseValue() {
              return mi(this.value, (e3) => {
                switch (e3) {
                  case De:
                  case o(Ge, j):
                    return we;
                  case o("hue", K):
                    return ee;
                }
                return "";
              });
            }
          }
          pi.matches = /^bd:./, pi.key = o("backdrop", R), pi.colorful = true;
          class xi extends $t {
          }
          xi.key = ae, xi.colorStarts = "fill:", xi.colorful = true, xi.values = { current: p };
          class bi extends $t {
          }
          bi.key = I, bi.colorful = true;
          class gi extends $t {
          }
          gi.matches = /^stroke:([0-9]|(max|min|calc|clamp)\(.*\))((?!\|).)*$/, gi.key = o(I, F);
          class yi extends $t {
            get parseValue() {
              return mi(this.value, (e3) => {
                switch (e3) {
                  case De:
                  case o(Ge, j):
                    return we;
                  case o("hue", K):
                    return ee;
                }
                return "";
              });
            }
          }
          yi.matches = /^(blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|opacity|saturate|sepia)\(/, yi.key = R, yi.colorful = true;
          class ki extends $t {
          }
          ki.key = "cursor";
          class vi extends $t {
          }
          vi.key = o("pointer", "events"), vi.semantics = { untouchable: "none" };
          class wi extends $t {
          }
          wi.key = "resize";
          class Oi extends $t {
          }
          Oi.key = o("touch", "action");
          class ji extends $t {
            get props() {
              return { "user-drag": this, "-webkit-user-drag": this };
            }
          }
          ji.key = o(S, "drag");
          class Si extends $t {
            get props() {
              return { "user-select": this, "-webkit-user-select": this };
            }
          }
          Si.key = o(S, "select");
          class Ni extends $t {
          }
          Ni.matches = /^s(?:hadow)?:./, Ni.key = o(ne, j), Ni.colorful = true;
          class $i extends $t {
          }
          $i.key = o(oe, j), $i.colorful = true;
          class Ii extends $t {
            get props() {
              return { "font-size": this, "line-height": Object.assign(Object.assign({}, this), { value: this.unit === we ? this.value + 0.375 + this.unit : "calc(" + this.value + this.unit + " + .375rem)", unit: "" }) };
            }
          }
          Ii.id = "textSize", Ii.matches = /^t(ext)?:([0-9]|(max|min|calc|clamp)\(.*\))((?!\|).)*$/;
          class Ri extends $t {
          }
          Ri.key = o(fe, xe), Ri.unit = "";
          class zi extends $t {
            get props() {
              return { [ie]: Object.assign(Object.assign({}, this), { value: D }), [o(D, g, k)]: Object.assign(Object.assign({}, this), { value: "repeat(" + this.value + x + U + "max(0,1fr))" }) };
            }
          }
          zi.matches = /^grid-cols:./, zi.key = o(D, k), zi.unit = "";
          class Wi extends $t {
            get props() {
              return { [ie]: Object.assign(Object.assign({}, this), { value: D }), [o(D, ge, b)]: Object.assign(Object.assign({}, this), { value: y }), [o(D, g, O)]: Object.assign(Object.assign({}, this), { value: "repeat(" + this.value + x + U + "max(0,1fr))" }) };
            }
          }
          Wi.key = o(D, O), Wi.unit = "";
          class Ai extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
            get props() {
              switch (this.prefix[4]) {
                case P:
                  return { [o(y, v)]: this };
                case q:
                  return { [o(w, v)]: this };
                default:
                  return { [v]: this };
              }
            }
          }
          Ai.id = "gap", Ai.matches = /^gap(-x|-y)?:./;
          class Ci extends $t {
          }
          Ci.key = o(fe, Ne);
          class Ei extends $t {
            get props() {
              return { ["--" + this.prefix.slice(1, -1)]: this };
            }
          }
          Ei.id = "variable", Ei.matches = /^\$.+:./, Ei.unit = "";
          class Mi extends $t {
          }
          Mi.matches = /^aspect:./, Mi.key = o("aspect", "ratio"), Mi.unit = "", Mi.semantics = { square: "1/1", video: "16/9" };
          class Vi extends $t {
            get props() {
              return { "box-decoration-break": this, "-webkit-box-decoration-break": this };
            }
          }
          Vi.matches = /^box:(slice|clone)(?!\|)/, Vi.key = o(ne, pe, xe);
          class _i extends $t {
          }
          _i.key = o(xe, "after");
          class Li extends $t {
          }
          Li.key = o(xe, "before");
          class Ti extends $t {
          }
          Ti.key = o(xe, "inside");
          class qi extends $t {
          }
          qi.key = o(B, "shrink"), qi.unit = "";
          class Pi extends $t {
          }
          Pi.matches = /^flex:((row|col|column)(-reverse)?)(?!\|)/, Pi.key = o(B, V), Pi.values = { col: y, "col-reverse": o(y, "reverse") };
          class Zi extends $t {
          }
          Zi.key = o(B, "grow"), Zi.unit = "";
          class Fi extends $t {
          }
          Fi.matches = /^flex:(wrap(-reverse)?|nowrap)(?!\|)/, Fi.key = o(B, "wrap");
          class Qi extends $t {
          }
          Qi.key = o(B, "basis"), Qi.values = He;
          class Ui extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          Ui.key = B, Ui.unit = "";
          const Xi = "999999";
          class Yi extends $t {
          }
          Yi.matches = /^o:./, Yi.key = "order", Yi.values = { first: "-999999", last: Xi }, Yi.unit = "";
          class Bi extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
            get parseValue() {
              return "span" === this.prefix.slice(-5, -1) && "auto" !== this.value ? "span " + this.value + "/span " + this.value : this.value;
            }
          }
          Bi.matches = /^grid-col(?:umn)?(?:-span)?:./, Bi.key = o(D, y), Bi.unit = "";
          class Di extends $t {
          }
          Di.matches = /^col-span:./, Di.key = o(y, Ve);
          class Gi extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
            get parseValue() {
              return "span" === this.prefix.slice(-5, -1) && "auto" !== this.value ? "span " + this.value + "/span " + this.value : this.value;
            }
          }
          Gi.matches = /^grid-row-span:./, Gi.key = o(D, w), Gi.unit = "";
          class Hi extends $t {
          }
          Hi.matches = /^(font-color:.|font:current)/, Hi.colorStarts = "(?:f(ont)?|color):", Hi.colorful = true, Hi.key = C, Hi.unit = "", Hi.values = { current: p };
          class Ji extends $t {
          }
          Ji.matches = /^ac:./, Ji.key = o(de, N);
          class Ki extends $t {
          }
          Ki.matches = /^ai:./, Ki.key = o(de, Le);
          class er extends $t {
          }
          er.matches = /^as:./, er.key = o(de, Te);
          class tr extends $t {
          }
          tr.matches = /^grid-auto-cols:./, tr.key = o(D, ge, k), tr.values = { min: o(U, N), max: o(Q, N) };
          class sr extends $t {
          }
          sr.matches = /^grid-flow:./, sr.key = o(D, ge, b);
          class ir extends $t {
          }
          ir.key = o(D, ge, O), ir.values = { min: o(U, N), max: o(Q, N) };
          class rr extends $t {
          }
          rr.matches = /^jc:./, rr.key = o(_e, N);
          class nr extends $t {
          }
          nr.matches = /^ji:./, nr.key = o(_e, Le);
          class ar extends $t {
          }
          ar.matches = /^js:./, ar.key = o(_e, Te);
          class cr extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          cr.key = o(qe, N);
          class lr extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          lr.key = o(qe, Le);
          class or extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          or.key = o(qe, Te);
          class dr extends $t {
            get props() {
              return { [this.prefix.slice(0, -1)]: this };
            }
            get order() {
              return "padding:" === this.prefix ? -1 : 0;
            }
          }
          dr.id = "padding", dr.matches = /^padding(?:-(?:left|right|top|bottom))?:./;
          class hr extends $t {
            get props() {
              return { [this.prefix.slice(0, -1)]: this };
            }
            get order() {
              return "margin:" === this.prefix ? -1 : 0;
            }
          }
          hr.id = "margin", hr.matches = /^margin(-(left|right|top|bottom))?:./;
          class ur extends $t {
          }
          ur.matches = /^(text-(overflow|ovf):.|t(ext)?:(ellipsis|clip)(?!\|))/, ur.key = o(oe, "overflow");
          class fr extends $t {
          }
          fr.matches = /^list-style:(inside|outside)(?!\|)/, fr.key = o(Ee, Oe, ve);
          class mr extends $t {
          }
          mr.matches = /^list-style:(disc|decimal)(?!\|)/, mr.key = o(Ee, Oe, Pe);
          class pr extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          pr.key = o(Ee, Oe);
          class xr extends $t {
          }
          xr.key = o(oe, pe, C), xr.colorStarts = "text-decoration:", xr.colorful = true, xr.values = { current: p };
          class br extends $t {
          }
          br.matches = /^t(ext)?:(solid|double|dotted|dashed|wavy)(?!\|)/, br.key = o(oe, pe, Oe);
          class gr extends $t {
          }
          gr.matches = /^text-decoration:(from-font(?!\|)|([0-9]|(max|min|calc|clamp)\(.*\))((?!\|).)*$)/, gr.key = o(oe, pe, "thickness"), gr.unit = "em";
          class yr extends $t {
          }
          yr.key = o(oe, "indent");
          class kr extends $t {
          }
          kr.key = N;
          class vr extends $t {
          }
          vr.key = o(Fe, C), vr.colorStarts = "outline:", vr.colorful = true, vr.values = { current: p };
          class wr extends $t {
          }
          wr.key = o(Fe, Ze);
          class Or extends $t {
          }
          Or.matches = /^outline:(none|dotted|dashed|solid|double|groove|ridge|inset|outset)(?!\|)/, Or.key = o(Fe, Oe);
          class jr extends $t {
          }
          jr.matches = /^outline:(medium|thick|thin|[0-9]|(max|min|calc|clamp)\(.*\))((?!\|).)*$/, jr.key = o(Fe, F);
          class Sr extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          Sr.key = Fe, Sr.colorful = true;
          class Nr extends $t {
          }
          Nr.matches = /^b(order)?:(collapse|separate)(?!\|)/, Nr.key = o(d, "collapse");
          class $r extends $t {
          }
          $r.key = o(d, Ne);
          class Ir extends $t {
          }
          Ir.key = o(Ae, "layout");
          class Rr extends $t {
          }
          Rr.key = o("accent", C), Rr.colorStarts = "accent:", Rr.colorful = true;
          class zr extends $t {
          }
          zr.key = "appearance";
          class Wr extends $t {
          }
          Wr.key = o("caret", C), Wr.matches = /^caret:transparent(?!\|)/, Wr.colorStarts = "caret:", Wr.colorful = true, Wr.values = { current: p };
          class Ar extends $t {
          }
          Ar.key = o(E, L);
          class Cr extends $t {
            get props() {
              if ("m" !== this.prefix.slice(-3, -2))
                return { [this.prefix.replace(/-m(?!argin)/, "-margin").slice(0, -1)]: this };
              {
                const e3 = o(E, u) + "-", t3 = e3 + qt, s2 = e3 + Pt, i2 = e3 + Lt, r2 = e3 + Tt;
                switch (this.prefix.slice(-2, -1)) {
                  case Xt:
                    return { [t3]: this, [s2]: this };
                  case Yt:
                    return { [i2]: this, [r2]: this };
                  case Zt:
                    return { [t3]: this };
                  case Ft:
                    return { [s2]: this };
                  case Qt:
                    return { [i2]: this };
                  case Ut:
                    return { [r2]: this };
                }
              }
            }
            get order() {
              return this.prefix === o(E, u) + ":" || this.prefix === o(E, "m:") ? -1 : 0;
            }
          }
          Cr.id = "scrollMargin", Cr.matches = /^scroll-m([xytblr]|argin(-(top|bottom|left|right))?)?:./;
          class Er extends $t {
            get props() {
              if ("p" !== this.prefix.slice(-3, -2))
                return { [this.prefix.replace(/-p(?!adding)/, "-padding").slice(0, -1)]: this };
              {
                const e3 = o(E, f) + "-", t3 = e3 + qt, s2 = e3 + Pt, i2 = e3 + Lt, r2 = e3 + Tt;
                switch (this.prefix.slice(-2, -1)) {
                  case Xt:
                    return { [t3]: this, [s2]: this };
                  case Yt:
                    return { [i2]: this, [r2]: this };
                  case Zt:
                    return { [t3]: this };
                  case Ft:
                    return { [s2]: this };
                  case Qt:
                    return { [i2]: this };
                  case Ut:
                    return { [r2]: this };
                }
              }
            }
            get order() {
              return this.prefix === o(E, f) + ":" || this.prefix === o(E, "p:") ? -1 : 0;
            }
          }
          Er.id = "scrollPadding", Er.matches = /^scroll-p([xytblr]|adding(-(top|bottom|left|right))?)?:./;
          class Mr extends $t {
          }
          Mr.matches = /^scroll-snap:(start|end|center)/, Mr.key = o(E, Qe, de);
          class Vr extends $t {
          }
          Vr.matches = /^scroll-snap:(normal|always)(?!\|)/, Vr.key = o(E, Qe, "stop");
          class _r extends $t {
          }
          _r.matches = /^scroll-snap:(([xy]|block|inline|both)(\|(proximity|mandatory))?)(?!\|)/, _r.key = o(E, Qe, Pe);
          class Lr extends $t {
          }
          Lr.key = "will-change";
          class Tr extends $t {
          }
          Tr.key = o(oe, "underline", Ze);
          class qr extends $t {
            get props() {
              return { [this.prefix.slice(0, -1)]: this };
            }
          }
          qr.matches = /^(?:top|bottom|left|right):./, qr.key = "inset";
          class Pr extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          Pr.matches = /^(columns|cols):./, Pr.key = k, Pr.unit = "";
          class Zr extends $t {
          }
          Zr.key = o("white", me), Zr.unit = "";
          class Fr extends $t {
          }
          Fr.matches = /^t(ext)?:(mixed|upright|sideways-right|sideways|use-glyph-orientation)(?!\|)/, Fr.key = o(oe, "orientation");
          class Qr extends $t {
          }
          Qr.matches = /^writing:./, Qr.key = o("writing", _);
          class Ur extends $t {
          }
          Ur.key = "contain";
          class Xr extends $t {
          }
          Xr.matches = /^\@duration:./, Xr.key = o(M, se), Xr.unit = "ms";
          class Yr extends $t {
          }
          Yr.matches = /^t(ext)?:(optimizeSpeed|optimizeLegibility|geometricPrecision)(?!\|)/, Yr.key = o(oe, "rendering");
          class Br extends $t {
          }
          Br.key = V;
          class Dr extends $t {
          }
          Dr.matches = /^t(ext)?:(none|underline|overline|line-through)(?!\|)/, Dr.key = o(oe, pe, ye);
          class Gr extends $t {
          }
          Gr.matches = /^grid-col-start:./, Gr.key = o(D, y, Be), Gr.unit = "";
          class Hr extends $t {
          }
          Hr.matches = /^list-style:(url|linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient|conic-gradient)\(.*\)((?!\|).)*$/, Hr.key = o(Ee, Oe, $);
          class Jr extends $t {
          }
          Jr.matches = /^shape:((margin|content|border|padding)(?!\|)|(inset|circle|ellipse|polygon|url|linear-gradient)\(.*\)((?!\|).)*$)/, Jr.key = o(Ue, "outside"), Jr.values = { content: o(N, ne), border: o(d, ne), padding: o(f, ne), margin: o(u, ne) };
          class Kr extends $t {
          }
          Kr.matches = /^shape:([0-9]|(max|min|calc|clamp)\(.*\))((?!\|).)*$/, Kr.key = o(Ue, u);
          class en extends $t {
          }
          en.key = o(Ue, $, "threshold"), en.unit = "";
          class tn extends $t {
          }
          tn.matches = /^clip:./, tn.key = o(ce, "path"), tn.values = { content: o(N, ne), border: o(d, ne), padding: o(f, ne), margin: o(u, ne), fill: o(ae, ne), stroke: o(I, ne), view: o(Xe, ne) };
          class sn extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          sn.key = D;
          class rn extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          rn.matches = /^f:./, rn.key = m, rn.unit = "", rn.colorful = true;
          class nn extends $t {
          }
          nn.key = "quotes";
          class an extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          an.key = o(D, g);
          class cn extends $t {
          }
          cn.key = o(D, w, Be), cn.unit = "";
          class ln extends $t {
          }
          ln.key = o(D, g, Ye) + "s";
          class on extends $t {
          }
          on.matches = /^grid-template-cols:./, on.key = o(D, g, k), on.values = { min: o(U, N), max: o(Q, N) };
          class dn extends $t {
          }
          dn.key = o(D, g, O), dn.values = { min: o(U, N), max: o(Q, N) };
          class hn extends $t {
            constructor() {
              super(...arguments), this.order = -1;
            }
          }
          hn.key = o(D, Ye), hn.unit = "";
          class un extends $t {
          }
          un.matches = /^grid-col-end:./, un.key = o(D, y, "end"), un.unit = "";
          class fn extends $t {
          }
          fn.key = o(D, w, "end"), fn.unit = "";
          class mn extends $t {
            get props() {
              return { "mask-image": this, "-webkit-mask-image": this };
            }
          }
          mn.key = o("mask", $);
          class pn extends $t {
            get props() {
              return { "-webkit-text-fill-color": this };
            }
          }
          pn.id = "textFillColor", pn.matches = /^text-fill-color:./, pn.colorStarts = "text-fill:", pn.colorful = true, pn.values = { current: p };
          class xn extends $t {
            get props() {
              return { "-webkit-text-stroke": this };
            }
          }
          xn.id = "textStroke", xn.matches = /^text-stroke:./;
          class bn extends $t {
            get props() {
              return { "-webkit-text-stroke-width": this };
            }
          }
          bn.id = "textStrokeWidth", bn.matches = /^text-stroke(:((thin|medium|thick)(?!\|)|\.?\d((?!\|).)*$)|-width:.)/;
          class gn extends $t {
            get props() {
              return { "-webkit-text-stroke-color": this };
            }
          }
          gn.id = "textStrokeColor", gn.matches = /^text-stroke-color:./, gn.colorStarts = "text-stroke:", gn.colorful = true, gn.values = { current: p };
          class yn extends $t {
          }
          yn.key = o(I, "dasharray");
          class kn extends $t {
          }
          kn.key = o(I, "dash") + Ze;
          class vn extends $t {
          }
          vn.key = "x", vn.unit = "";
          class wn extends $t {
          }
          wn.key = "y", wn.unit = "";
          class On extends $t {
          }
          On.key = "cx", On.unit = "";
          class jn extends $t {
          }
          jn.key = "cy", jn.unit = "";
          class Sn extends $t {
          }
          Sn.key = "rx", Sn.unit = "";
          class Nn extends $t {
          }
          Nn.key = "ry", Nn.unit = "";
          class $n extends $t {
          }
          $n.key = o(d, $, "outset");
          class In extends $t {
          }
          In.matches = /^border-image:(?:stretch|repeat|round|space)(?:(?!\|).)*$/, In.key = o(d, $, A);
          class Rn extends $t {
          }
          Rn.key = o(d, $, "slice"), Rn.unit = "";
          class zn extends $t {
          }
          zn.matches = /^border-image:(?:url|linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient|conic-gradient)\(.*\)(?:(?!\|).)*$/, zn.key = o(d, $, "source");
          class Wn extends $t {
          }
          Wn.matches = /^border-image:(?:\.?[0-9]|(max|min|calc|clamp)\(.*\))(?:(?!\|).)*$/, Wn.key = o(d, $, F);
          class An extends $t {
          }
          An.key = o(d, $), An.unit = "";
          const Cn = /\{(.*)\}/;
          class En extends $t {
            get props() {
              const e3 = {}, t3 = (t4) => {
                const s3 = t4.indexOf(":");
                if (-1 !== s3) {
                  const i3 = t4.slice(0, s3);
                  i3 in e3 || (e3[i3] = { value: t4.slice(s3 + 1) });
                }
              }, s2 = (e4) => {
                const s3 = e4.text.slice(CSS.escape(e4.name).length).match(Cn)[1].split(";");
                for (const e5 of s3)
                  t3(e5);
              }, i2 = [];
              let r2 = "";
              const n2 = () => {
                r2 && (i2.push(r2), r2 = "");
              };
              let c2 = 1;
              const l2 = (e4) => {
                for (; c2 < this.value.length; c2++) {
                  const t4 = this.value[c2];
                  if (!e4) {
                    if (";" === t4) {
                      n2();
                      continue;
                    }
                    if ("}" === t4)
                      break;
                  }
                  if (r2 += t4, e4 === t4) {
                    if ("'" === e4) {
                      let e5 = 0;
                      for (let t5 = r2.length - 2; "\\" === r2[t5]; t5--)
                        e5++;
                      if (e5 % 2)
                        continue;
                    }
                    break;
                  }
                  t4 in a && "'" !== e4 && (c2++, l2(a[t4]));
                }
              };
              l2(void 0), n2();
              for (const e4 of i2) {
                const i3 = Ct.findAndNew(e4);
                if (Array.isArray(i3))
                  for (const e5 of i3)
                    s2(e5);
                else
                  i3 ? s2(i3) : t3(e4);
              }
              return e3;
            }
          }
          En.id = Ce, En.matches = /^(?:.+?[*_>~+])?\{.+?\}/, En.unit = "";
          class Mn extends $t {
          }
          Mn.key = "counter-increment", Mn.unit = "";
          var Vn = s(580), _n = s.n(Vn);
          class Ln extends $t {
          }
          Ln.semantics = { "center-content": { "justify-content": "center", "align-items": "center" }, "sr-only": { position: "absolute", width: "1px", height: "1px", padding: "0", margin: "-1px", overflow: "hidden", clip: "rect(0,0,0,0)", "white-space": "nowrap", "border-width": "0" }, full: { width: "100%", height: "100%" }, center: { left: 0, right: 0, "margin-left": ge, "margin-right": ge }, middle: { top: 0, bottom: 0, "margin-top": ge, "margin-bottom": ge }, "break-spaces": { "white-space": o(xe, me) + "s" }, "break-word": { "overflow-wrap": o(xe, fe), overflow: re } };
          const Tn = "undefined" != typeof window, qn = [Ln, En, Ei, Et, Vt, Hi, Bt, hr, dr, _t, Qi, Fi, Zi, qi, Pi, Ui, Ss, Dt, Gt, Ht, Jt, Ur, kr, Mn, Kt, is, rs, ns, rn, as, cs, ls, os, xr, br, gr, Dr, ds, Tr, ur, Fr, hs, Yr, yr, us, Pr, Zr, qr, fs, Os, js, Ns, $s, Is, Rs, zs, Ws, As, Cs, Es, ui, fi, ki, vi, wi, Oi, Ri, Ci, ji, Si, $i, Ii, pn, bn, gn, xn, Ni, Ir, xs, ps, ms, bs, vs, ws, ks, ys, gs, Ms, Vs, Xr, _s, Ls, Ts, qs, Ps, Zs, Qs, Hs, Js, Ks, Nr, $r, ei, $n, In, Rn, zn, Wn, An, ti, si, ii, ri, ni, ai, ci, li, oi, di, hi, pi, yi, xi, yn, kn, gi, bi, vn, wn, On, jn, Sn, Nn, Gr, un, Bi, zi, cn, fn, Gi, Wi, tr, sr, ir, ln, on, dn, an, hn, sn, Ai, Yi, Ti, Li, _i, Vi, Mi, Di, Ji, Ki, er, rr, nr, ar, cr, lr, or, fr, mr, Hr, pr, vr, wr, Or, jr, Sr, Rr, zr, Wr, Ar, Cr, Er, Mr, Vr, _r, Lr, Qr, Br, Jr, Kr, en, tn, nn, mn], Pn = qn.get = (e3) => qn.find((t3) => {
            var s2;
            return e3 === t3.id || e3 === (null === (s2 = t3.key) || void 0 === s2 ? void 0 : s2.replace(/-./g, (e4) => e4[1].toUpperCase())) || e3 === t3.key;
          });
          function Zn() {
            if (Tn) {
              const e3 = new Ct(document.head);
              Ct.root = e3, e3.observe(document.documentElement);
            }
          }
          qn.extend = function(e3, ...t3) {
            const s2 = Object.assign({}, ...t3);
            for (const t4 in s2) {
              const i2 = Pn(t4);
              if (i2) {
                const r2 = s2[t4];
                i2.extend(e3, r2);
              }
            }
            return this;
          }, $t.extend("colors", _n()).extend("breakpoints", l()), Ct.Styles.push(...qn);
          Tn && (window.initMasterCSS = Zn, window.MasterStyles = qn, window.MasterCSSManual || Zn());
          const Fn = s(580), Qn = s(642);
        })(), i;
      })();
    });
  }
});
export default require_css();
//# sourceMappingURL=@master_css.js.map
